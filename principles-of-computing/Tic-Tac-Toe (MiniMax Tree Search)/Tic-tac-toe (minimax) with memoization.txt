"""
Mini-max Tic-Tac-Toe Player
"""

import poc_ttt_gui
import poc_ttt_provided as provided
import random

# Set timeout, as mini-max can take a long time
import codeskulptor
codeskulptor.set_timeout(60)

# SCORING VALUES - DO NOT MODIFY
SCORES = {provided.PLAYERX: 1,
          provided.DRAW: 0,
          provided.PLAYERO: -1}

#put this with global variables
DEBUG = {provided.PLAYERX: "pX", provided.PLAYERO: "pO"}

def mm_move(board, player, memo_dict = {}):
    """
    Make a move on the board.
    
    Returns a tuple with two elements.  The first element is the score
    of the given board and the second element is the desired move as a
    tuple, (row, col).
    """
    # avoid pylint error of empty default dictionary
    empty_squares = board.get_empty_squares()    
        
    if board.check_win() is None:
        max_score = float("-inf")
        best_move = (-1, -1)     
        new_player = provided.switch_player(player)
        for square in empty_squares:
            board_clone = board.clone()
            board_clone.move(square[0], square[1], player)
            move = mm_move(board_clone, new_player)
            score = move[0]
            if convert_to_str(board, player) in memo_dict:
                return memo_dict[convert_to_str(board, player)][0], memo_dict[convert_to_str(board, player)][1]
            if score*SCORES[player] == 1:
                memo_dict[convert_to_str(board, player)] = (score, square)
                return score, square
            if score*SCORES[player] > max_score or score == 0:
                max_score = score
                best_move = square
        memo_dict[convert_to_str(board, player)] = (max_score, best_move)
        return max_score, best_move        
    else:
        return SCORES[board.check_win()], (-1, -1)
    
    
def convert_to_str(board, player):
    """
    help function for memoization in recursion to speed it up
    """
    board_str = ""
    for row in range(board.get_dim()):
        for col in range(board.get_dim()):
             board_str += str(board.square(row, col))
    return board_str+str(player)
        
    
def move_wrapper(board, player, trials):
    """
    Wrapper to allow the use of the same infrastructure that was used
    for Monte Carlo Tic-Tac-Toe.
    """
    move = mm_move(board, player)
    assert move[1] != (-1, -1), "returned illegal move (-1, -1)"
    return move[1]

# Test game with the console or the GUI.
# Uncomment whichever you prefer.
# Both should be commented out when you submit for
# testing to save time.
##
provided.play_game(move_wrapper, 1, False)        
poc_ttt_gui.run_gui(3, provided.PLAYERO, move_wrapper, 1, False)
#
#import user37_DPspPq7UVT_5 as testsuite
#testsuite.run_tests(mm_move)