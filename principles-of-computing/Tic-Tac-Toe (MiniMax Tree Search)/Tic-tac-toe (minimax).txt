"""
Mini-max Tic-Tac-Toe Player
"""

import poc_ttt_gui
import poc_ttt_provided as provided

# Set timeout, as mini-max can take a long time
import codeskulptor
codeskulptor.set_timeout(60)

# SCORING VALUES - DO NOT MODIFY
SCORES = {provided.PLAYERX: 1,
          provided.DRAW: 0,
          provided.PLAYERO: -1}

#put this with global variables
DEBUG = {provided.PLAYERX: "pX", provided.PLAYERO: "pO"}

def mm_move(board, player):
    """
    Make a move on the board.
    
    Returns a tuple with two elements.  The first element is the score
    of the given board and the second element is the desired move as a
    tuple, (row, col).
    """
    empty_squares = board.get_empty_squares()

    if board.check_win() is not None:
        return SCORES[board.check_win()], (-1, -1)
    else:
        max_score = float("-inf")
        best_move = (-1, -1)
        for square in empty_squares:         
            board_clone = board.clone()
            board_clone.move(square[0], square[1], player)            
            new_player = provided.switch_player(player)
            move = mm_move(board_clone, new_player)
            score = move[0]
            print score, square
            if score*SCORES[player] == 1:
                return score, square
            elif score*SCORES[player] > max_score or score == 0:
                max_score = score
                best_move = square
        return max_score, best_move
    
def move_wrapper(board, player, trials):
    """
    Wrapper to allow the use of the same infrastructure that was used
    for Monte Carlo Tic-Tac-Toe.
    """
    move = mm_move(board, player)
    assert move[1] != (-1, -1), "returned illegal move (-1, -1)"
    return move[1]
import poc_simpletest
from poc_ttt_provided import *
suite = poc_simpletest.TestSuite()
move = mm_move(TTTBoard(3, False, [[EMPTY, EMPTY, PLAYERX], [EMPTY, EMPTY, EMPTY], [EMPTY, EMPTY, EMPTY]]), PLAYERO)
suite.run_test(move[0], 0, "Test #abc")
suite.report_results()

# Test game with the console or the GUI.
# Uncomment whichever you prefer.
# Both should be commented out when you submit for
# testing to save time.
##
#provided.play_game(move_wrapper, 1, False)        
#poc_ttt_gui.run_gui(3, provided.PLAYERO, move_wrapper, 1, False)

#import user37_DPspPq7UVT_5 as testsuite
#testsuite.run_tests(mm_move)
#import user36_AQLww3W1YBS5oCt as unit_test
#unit_test.test_mm_move(mm_move)
#
#import user37_WolHgYTZC6_3 as testsuite
#testsuite.run_tests(mm_move)