"""
Student code for Word Wrangler game
"""

import urllib2
import codeskulptor
import poc_wrangler_provided as provided
# intersect is inefficient, needs optimisation


WORDFILE = "assets_scrabble_words3.txt"


# Functions to manipulate ordered word lists

def remove_duplicates(list1):
    """
    Eliminate duplicates in a sorted list.

    Returns a new sorted list with the same elements in list1, but
    with no duplicates.

    This function can be iterative.
    """
    new_list = []  
#    # inefficient implementation
#    repeat = []
#    for item in list1:
#        if item not in new_list:
#            new_list.append(item)
    for index in range(len(list1)-1):
        if list1[index] != list1[index+1]:
            new_list.append(list1[index])
    if len(list1) >= 1:
        new_list.append(list1[-1])
    return new_list


def intersect(list1, list2):
    """
    Compute the intersection of two sorted lists.

    Returns a new sorted list containing only elements that are in
    both list1 and list2.

    This function can be iterative.
    """
    new_list = []
    #in efficient implementation
    index_added = []
    for item in list1:
        for index in range(len(list2)):
            if index in index_added:
                continue
            elif item == list2[index]:
                index_added.append(index)
                new_list.append(item)
                break
#    # efficient
#    new_list = list(set(list1).intersection(set(list2)))
    return new_list

# Functions to perform merge sort

def merge(list1, list2):
    """
    Merge two sorted lists.

    Returns a new sorted list containing all of the elements that
    are in either list1 and list2.

    This function can be iterative.
    """
    new_list = []
    if len(list1) <= 0 and len(list2) <= 0:
        return new_list
    elif  len(list1) <= 0:
        return list2
    elif len(list2) <= 0:
        return list1
    
    if len(list1) >= len(list2):
        long_list = list(list1)
        short_list = list(list2)
    else:
        long_list = list(list2)
        short_list = list(list1)
    for item in long_list:
        while len(short_list) and short_list[0] < item:
            new_list.append(short_list[0])
            short_list.pop(0)
        new_list.append(item)
    new_list.extend(short_list)
    return new_list

def merge_sort(list1):
    """
    Sort the elements of list1.

    Return a new sorted list with the same elements as list1.

    This function should be recursive.
    """
    if len(list1) <= 1:
        return list1
    else:
        mid = len(list1)/2
        first_half = merge_sort(list1[:mid])
        second_half = merge_sort(list1[mid:])
    return merge(first_half, second_half)

# Function to generate all strings for the word wrangler game

def gen_all_strings(word):
    """
    Generate all strings that can be composed from the letters in word
    in any order.

    Returns a list of all strings that can be formed from the letters
    in word.

    This function should be recursive.
    """
    if len(word) < 1:
        return [""]
    elif len(word) == 1:
        return ["", word]
    else:
        first = word[:1]
        rest = word[1:]
        rest_strings = gen_all_strings(rest)
        new_strings = list(rest_strings)
        for string in rest_strings:
            for index in range(len(string)+1):
                new_string = string[:index] + first + string[index:]
                new_strings = new_strings + [new_string]
    return new_strings

# Function to load words from a file

def load_words(filename):
    """
    Load word list from the file named filename.

    Returns a list of strings.
    """
    list_strings = []
    url = codeskulptor.file2url(filename)
    opened_file = urllib2.urlopen(url)
    for line in opened_file.readlines():
        list_strings.append(line[:-1])
    return list_strings

load_words("assets_scrabble_words3.txt")
def run():
    """
    Run game.
    """
    words = load_words(WORDFILE)
    wrangler = provided.WordWrangler(words, remove_duplicates, 
                                     intersect, merge_sort, 
                                     gen_all_strings)
    provided.run_game(wrangler)

# Uncomment when you are ready to try the game
#run()

    
    
