# Implementation of classic arcade game Pong
# Extra features include single player mode, AI levels, basic edge physics and sound effects.
# http://www.codeskulptor.org/#user23_gNwHQtYxIgWJppF.py

import simplegui
import random
import math

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 12
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
ball_pos = [WIDTH / 2, HEIGHT / 2]

# initialize other variables
player_name_one = "Player 1"
player_name_two = "Player 2"
play_with_AI = False
difficulty = 2.2
impossible = False
EDGE_OF_PADDLE = 5

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def ball_init(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    if direction == "left":
        ball_pos = [WIDTH / 2, HEIGHT / 2]
        ball_vel = [random.randrange(120, 240)/60*-1,  random.randrange(60, 180)/60*-1]
    elif direction == "right" :
        ball_pos = [WIDTH / 2, HEIGHT / 2]
        ball_vel = [random.randrange(120, 240)/60,  random.randrange(60, 180)/60*-1]

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel, ball_vel# these are floats
    global score1, score2, ball_pos  # these are ints
    paddle1_pos = [WIDTH-HALF_PAD_WIDTH, HEIGHT/2]
    paddle2_pos = [0+HALF_PAD_WIDTH, HEIGHT/2]
    paddle1_vel = [0, 0]
    paddle2_vel = [0, 0]
    score1 = 0
    score2 = 0
    # reset ball position
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    ball_vel = [random.randrange(120, 240)/60*-1,  random.randrange(60, 180)/60*-1]
    # set to PVP
    play_with_AI == False
    
def draw(c):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel

    # update paddle's vertical position, keep paddle on the screen
    paddle1_pos[0] += paddle1_vel[0]
    paddle1_pos[1] += paddle1_vel[1]
    paddle2_pos[0] += paddle2_vel[0]
    paddle2_pos[1] += paddle2_vel[1]
    
    if paddle1_pos[1] <= HALF_PAD_HEIGHT:
        paddle1_vel[1] = 0
        # fixed the bug of single presses that move the paddles out of the screen (little by little)
        paddle1_pos[1] = HALF_PAD_HEIGHT
    elif paddle1_pos[1] >= HEIGHT-HALF_PAD_HEIGHT:
        paddle1_vel[1] = 0
        paddle1_pos[1] = HEIGHT-HALF_PAD_HEIGHT
    if paddle2_pos[1] <= HALF_PAD_HEIGHT:
        paddle2_vel[1] = 0
        paddle2_pos[1] = HALF_PAD_HEIGHT
    elif paddle2_pos[1] >= HEIGHT-HALF_PAD_HEIGHT:
        paddle2_vel[1] = 0
        paddle2_pos[1] = HEIGHT-HALF_PAD_HEIGHT
    
    # draw mid line and gutters
    c.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    c.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    c.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    
    # draw paddles
    c.draw_line([WIDTH - HALF_PAD_WIDTH,paddle1_pos[1]-HALF_PAD_HEIGHT], [WIDTH - HALF_PAD_WIDTH,paddle1_pos[1]+HALF_PAD_HEIGHT], PAD_WIDTH, "White")
    c.draw_line([HALF_PAD_WIDTH,paddle2_pos[1]-HALF_PAD_HEIGHT], [HALF_PAD_WIDTH,paddle2_pos[1]+HALF_PAD_HEIGHT], PAD_WIDTH, "White")

    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    # collision/reflection and score adding
    # bounce from walls
    if ball_pos[1] <= BALL_RADIUS:
        bounce_sound1.play()
        ball_vel[1] = - ball_vel[1] * 1.1        
    elif ball_pos[1] >= HEIGHT-1-BALL_RADIUS:
        bounce_sound2.play()
        ball_vel[1] = - ball_vel[1]  * 1.1    
    # bounce from rackets
    elif ball_pos[0]-BALL_RADIUS <= PAD_WIDTH:
        if ball_pos[1] >= paddle2_pos[1]-HALF_PAD_HEIGHT and ball_pos[1] <= paddle2_pos[1]+HALF_PAD_HEIGHT:
            bounce_sound3.play()
            # top edge of paddle
            if ball_pos[1] <= paddle2_pos[1]-HALF_PAD_HEIGHT + EDGE_OF_PADDLE:
                ball_vel[0] = - ball_vel[0] * 1.1
                ball_vel[1] = -1 * math.fabs(ball_vel[1])
            # bottom edge of paddle
            elif ball_pos[1] >= paddle2_pos[1]+HALF_PAD_HEIGHT - EDGE_OF_PADDLE:
                ball_vel[0] = - ball_vel[0] * 1.1
                ball_vel[1] = math.fabs(ball_vel[1])
            else:
                # normal reflection
                ball_vel[0] = - ball_vel[0] * 1.1
        else:
            failure_sound.play()
            score2 += 1
            ball_init("right")
    elif ball_pos[0]+BALL_RADIUS >= WIDTH-1-PAD_WIDTH:
        if  ball_pos[1] >= paddle1_pos[1]-HALF_PAD_HEIGHT and ball_pos[1] <= paddle1_pos[1]+HALF_PAD_HEIGHT:
            bounce_sound4.play()
            if ball_pos[1] <= paddle1_pos[1]-HALF_PAD_HEIGHT + EDGE_OF_PADDLE:                
                ball_vel[0] = - ball_vel[0] * 1.1
                ball_vel[1] = -1 * math.fabs(ball_vel[1])
            elif ball_pos[1] >= paddle1_pos[1]+HALF_PAD_HEIGHT - EDGE_OF_PADDLE:
                ball_vel[0] = - ball_vel[0] * 1.1
                ball_vel[1] = math.fabs(ball_vel[1])
            else:
                # normal reflection
                ball_vel[0] = - ball_vel[0] * 1.1
        else:
            failure_sound.play()
            score1 += 1
            ball_init("left")
            
    # impossible difficulty AI (it's possible to score a point or two, basically impossible to win unless you're a bot too and got lucky)
    if play_with_AI == True and impossible == True:        
            paddle1_pos[1] = ball_pos[1]

    # draw ball and scores
    c.draw_circle(ball_pos, BALL_RADIUS, 2, "White", "White")
    c.draw_text(str(score1), (WIDTH/4, HEIGHT/8), 24, "White")
    c.draw_text(str(score2), (WIDTH/2+WIDTH/4, HEIGHT/8), 24, "White")
    # draw player names
    c.draw_text(player_name_one, (WIDTH/5, HEIGHT/16), 24, "White")
    c.draw_text(player_name_two, (WIDTH/2+WIDTH/5, HEIGHT/16), 24, "White")
    # debugging stuff
    # c.draw_text(str(angle(ball_vel[0], ball_vel[1])), (0, HEIGHT/5*4), 24, "Red")
    # c.draw_text(str(ball_pos), (0, HEIGHT), 24, "Red")


    #determine winner and stop the game
    if score1 == 10:
        c.draw_text("Winner", (WIDTH/6, HEIGHT/2), 24, "Red")
        ball_vel = [0, 0]
    elif score2 == 10:
        c.draw_text("Winner", (WIDTH/2+WIDTH/6, HEIGHT/2), 24, "Red")
        ball_vel = [0, 0] 
           
# computer AI mechanism
def AI_update():
    global paddle1_vel,paddle2_vel
    acc = 7
    if play_with_AI == True:
        if ball_vel[0] < 0 and ball_pos[0] > WIDTH/5:
            paddle1_vel[1] = 0
        else:
            if ball_pos[1] < paddle1_pos[1] - HALF_PAD_HEIGHT/difficulty:
                if angle(ball_vel[0], ball_vel[1]) < 10:
                    # press the up key
                    paddle1_vel[1] = -acc
                else:                    
                    paddle1_vel[1] = 0
            elif ball_pos[1] > paddle1_pos[1] + HALF_PAD_HEIGHT/difficulty:
                if angle(ball_vel[0], ball_vel[1]) > -10:
                    # press the down key
                    paddle1_vel[1] = +acc                   
                else:
                    paddle1_vel[1] = 0
            elif ball_pos[1] < paddle1_pos[1] + HALF_PAD_HEIGHT/difficulty and ball_pos[1] < paddle1_pos[1] - HALF_PAD_HEIGHT/difficulty:
                if angle(ball_vel[0], ball_vel[1]) < -10:
                    paddle1_vel[1] = -acc
                elif angle(ball_vel[0], ball_vel[1]) > 10:
                    paddle1_vel[1] = +acc                   
            else:
                keyup(38)
                keyup(40)
# calculate the angle at which the ball is coming from the left. x is the hypotenuse and y is the opposite of a triangle.
def angle(x, y):
    if x != 0:
        return math.atan(y/x)/(2*math.pi)*360

#setting two game modes and single player difficulty levels
def two_players():
    global play_with_AI, player_name_two
    new_game()
    play_with_AI = False
    player_name_two = "Player 2"
def easy():
    global difficulty, impossible, play_with_AI, player_name_two
    difficulty = 1.5
    impossible = False
    new_game()
    play_with_AI = True 
    player_name_two = "Computer"
def normal():
    global difficulty, impossible, play_with_AI, player_name_two
    difficulty = 2.2
    impossible = False
    new_game()
    play_with_AI = True 
    player_name_two = "Computer"
def hard():
    global difficulty, impossible, play_with_AI, player_name_two
    difficulty = 3
    impossible = False
    new_game()
    play_with_AI = True 
    player_name_two = "Computer"
def impossible():
    global difficulty, impossible, play_with_AI, player_name_two
    impossible = True
    new_game()
    play_with_AI = True 
    player_name_two = "Computer"


    
def keydown(key):
    global paddle1_vel,paddle2_vel
    acc = 7
    if key==simplegui.KEY_MAP["down"] and play_with_AI == False:
        paddle1_vel[1] = +acc
    elif key==simplegui.KEY_MAP["up"] and play_with_AI == False:
        paddle1_vel[1] = -acc
    if key==simplegui.KEY_MAP["s"] :
        paddle2_vel[1] = +acc
    elif key==simplegui.KEY_MAP["w"]:
        paddle2_vel[1] = -acc
              
def keyup(key):
    global paddle1_vel,paddle2_vel
    if key==simplegui.KEY_MAP["down"] and play_with_AI == False:
        paddle1_vel[1] = 0
    elif key==simplegui.KEY_MAP["up"] and play_with_AI == False:
        paddle1_vel[1] = 0
    if key==simplegui.KEY_MAP["s"]:
        paddle2_vel[1] = 0
    elif key==simplegui.KEY_MAP["w"]:
        paddle2_vel[1] = 0
       


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_label("Two Player Mode")
frame.add_button("Restart", two_players, 200)
frame.add_label("")
frame.add_label("Single Player Mode")
frame.add_button("Restart Lvl: Easy", easy, 200)
frame.add_button("Restart Lvl: Normal", normal, 200)
frame.add_button("Restart Lvl: Hard", hard, 200)
frame.add_button("Restart Lvl: Impossible", impossible, 200)



# AI timer, load audio
AI_timer = simplegui.create_timer(150, AI_update)
bounce_sound1 = simplegui.load_sound("http://www.freesound.org/data/previews/191/191590_2437358-lq.mp3")#toy button by fins
bounce_sound2 = simplegui.load_sound("http://www.freesound.org/data/previews/191/191590_2437358-lq.mp3")#toy button by fins
bounce_sound3 = simplegui.load_sound("http://www.freesound.org/data/previews/191/191590_2437358-lq.mp3")#toy button by fins
bounce_sound4 = simplegui.load_sound("http://www.freesound.org/data/previews/191/191590_2437358-lq.mp3")#toy button by fins
failure_sound = simplegui.load_sound("http://www.freesound.org/data/previews/146/146731_2437358-lq.mp3")#game fail by fins

# start frame
new_game()
frame.start()
AI_timer.start()