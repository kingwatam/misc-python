# httpwww.codeskulptor.org#user23_d7pScxu86sxmuSG.py

# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 12
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
ball_pos = [WIDTH / 2, HEIGHT / 2]

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def ball_init(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    if direction == "left":
        ball_pos = [WIDTH / 2, HEIGHT / 2]
        ball_vel = [random.randrange(120, 240)/60*-1,  random.randrange(60, 180)/60*-1]
    elif direction == "right" :
        ball_pos = [WIDTH / 2, HEIGHT / 2]
        ball_vel = [random.randrange(120, 240)/60,  random.randrange(60, 180)/60*-1]

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel, ball_vel# these are floats
    global score1, score2, ball_pos  # these are ints
    paddle1_pos = [WIDTH-HALF_PAD_WIDTH, HEIGHT/2]
    paddle2_pos = [0+HALF_PAD_WIDTH, HEIGHT/2]
    paddle1_vel = [0, 0]
    paddle2_vel = [0, 0]
    score1 = 0
    score2 = 0
    # reset ball position
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    ball_vel = [random.randrange(120, 240)/60*-1,  random.randrange(60, 180)/60*-1]

def draw(c):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel

    # update paddle's vertical position, keep paddle on the screen
    paddle1_pos[0] += paddle1_vel[0]
    paddle1_pos[1] += paddle1_vel[1]
    paddle2_pos[0] += paddle2_vel[0]
    paddle2_pos[1] += paddle2_vel[1]
    
    if paddle1_pos[1] <= HALF_PAD_HEIGHT:
        paddle1_vel[1] = 0
        # fixed the bug of single presses that move the paddles out of the screen (little by little)
        paddle1_pos[1] = HALF_PAD_HEIGHT
    elif paddle1_pos[1] >= HEIGHT-HALF_PAD_HEIGHT:
        paddle1_vel[1] = 0
        paddle1_pos[1] = HEIGHT-HALF_PAD_HEIGHT
    if paddle2_pos[1] <= HALF_PAD_HEIGHT:
        paddle2_vel[1] = 0
        paddle2_pos[1] = HALF_PAD_HEIGHT
    elif paddle2_pos[1] >= HEIGHT-HALF_PAD_HEIGHT:
        paddle2_vel[1] = 0
        paddle2_pos[1] = HEIGHT-HALF_PAD_HEIGHT
    
    # draw mid line and gutters
    c.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    c.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    c.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    
    # draw paddles
    c.draw_line([WIDTH - HALF_PAD_WIDTH,paddle1_pos[1]-HALF_PAD_HEIGHT], [WIDTH - HALF_PAD_WIDTH,paddle1_pos[1]+HALF_PAD_HEIGHT], PAD_WIDTH, "White")
    c.draw_line([HALF_PAD_WIDTH,paddle2_pos[1]-HALF_PAD_HEIGHT], [HALF_PAD_WIDTH,paddle2_pos[1]+HALF_PAD_HEIGHT], PAD_WIDTH, "White")

    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    # collision/reflection and score adding
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1] * 1.1
    elif ball_pos[1] >= HEIGHT-1-BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]  * 1.1
    elif ball_pos[0]-BALL_RADIUS <= PAD_WIDTH:
        if ball_pos[1] >= paddle2_pos[1]-HALF_PAD_HEIGHT+1 and ball_pos[1] <= paddle2_pos[1]+HALF_PAD_HEIGHT-1:
            ball_vel[0] = - ball_vel[0] * 1.1
        else:
            score2 += 1
            ball_init("right")
    elif ball_pos[0]+BALL_RADIUS >= WIDTH-1-PAD_WIDTH:
        if  ball_pos[1] >= paddle1_pos[1]-HALF_PAD_HEIGHT+1 and ball_pos[1] <= paddle1_pos[1]+HALF_PAD_HEIGHT-1:
            ball_vel[0] = - ball_vel[0] * 1.1
        else:
            score1 += 1
            ball_init("left")

    # draw ball and scores
    c.draw_circle(ball_pos, BALL_RADIUS, 2, "White", "White")
    c.draw_text(str(score1), (WIDTH/4, HEIGHT/8), 24, "White")
    c.draw_text(str(score2), (WIDTH/2+WIDTH/4, HEIGHT/8), 24, "White")

    #determine winner and stop the game
    if score1 == 10:
        c.draw_text("Winner", (WIDTH/6, HEIGHT/2), 24, "Red")
        ball_vel = [0, 0]
    elif score2 == 10:
        c.draw_text("Winner", (WIDTH/2+WIDTH/6, HEIGHT/2), 24, "Red")
        ball_vel = [0, 0]
   
def keydown(key):
    global paddle1_vel
    acc = 7
    if key==simplegui.KEY_MAP["down"] :
        paddle1_vel[1] = +acc
    elif key==simplegui.KEY_MAP["up"]:
        paddle1_vel[1] = -acc
    if key==simplegui.KEY_MAP["s"] :
        paddle2_vel[1] = +acc
    elif key==simplegui.KEY_MAP["w"]:
        paddle2_vel[1] = -acc
              
def keyup(key):
    global paddle1_vel,paddle2_vel
    if key==simplegui.KEY_MAP["down"]:
        paddle1_vel[1] = 0
    elif key==simplegui.KEY_MAP["up"]:
        paddle1_vel[1] = 0
    if key==simplegui.KEY_MAP["s"]:
        paddle2_vel[1] = 0
    elif key==simplegui.KEY_MAP["w"]:
        paddle2_vel[1] = 0

        
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Restart", new_game, 100)

# start frame
new_game()
frame.start()
