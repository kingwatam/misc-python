#####################################################################   CSSE1001/7030 - Assignment 2##   Student Number: 43710034##   Student Name: Jake Wood###################################################################### Do not change the following import#from assign2_support import *###################################################################### Insert your code below#####################################################################class PVData(object):    """A class used to hold the PV data for a given date    """    def __init__(self):        """Initializes the PV data to yesterdays date        """        #Loading the data for yesterdays date from the support file        self._date = yesterday()        self._load_data = load_data(self._date)    def change_date(self, date):        """Changes the date to be a given date        """        self._date = date    def get_date(self):        """Returns the date for the stored data        """        return self._date    def get_time(self, time_index):        """returns the time for the given index of the time data        """        if load_data:            return self._load_data[time_index][0]                return load_data(self._date)[time_index][0]    def get_temperature(self, loaded_data = None):        """returns the list of temperature values for the current date        """        if loaded_data is None:            loaded_data = self._load_data        temperature_list = []        for minute in loaded_data:            temperature_list.append(minute[1])        return temperature_list    def get_sunlight(self, loaded_data = None):        """returns the list of sunlight values for the current date        """        if loaded_data is None:            loaded_data = self._load_data        sunlight_list = []        for minute in loaded_data:            sunlight_list.append(minute[2])        return sunlight_list    def get_power(self, array, loaded_data = None):        """returns the list of power outputs for the current date and the        given array name        """        self._array = array        if loaded_data is None:            loaded_data = self._load_data         arrays = {'UQ Centre, St Lucia' : 0,                  'Concentrating Array' : 1,                  'Multi Level Car Park #1' : 2,                  'Multi Level Car Park #2' : 3,                  'Sir Llew Edwards Bld.' : 4,                  'Prentice Building' : 5,                  'Advanced Engineering Bld.' : 6,                  'Learning Innovation Bld.' : 7,                  'Global Change Institute' : 8}        power_list = []        if array == "All Arrays Combined":            for minute in loaded_data:                power_list.append(minute[3][9])            else:            for minute in loaded_data:                power_list.append(minute[3][arrays[array]])        return power_list    def get_array(self):        return self._arraycanvaswidth=840canvasheight=500class Plotter(Canvas):    """The class that is responsible for the plotting of all data within the canvas    """    def __init__(self, master, pvdata):        """Defines the canvas and binding methods        """        Canvas.__init__(self, master, bg="white", width=canvaswidth, height=canvasheight)        self._time = ""        self._temp = ""        self._sunlight = ""        self._power = ""        self._v = StringVar()        self._top_label = Label(master, textvariable=self._v)        self._top_label.pack(side=TOP, anchor=W)        self._v.set("Date for " + str(pvdata.get_date()) + " at   " + self._time+ "    :     Temperature  " +self._temp + "  C       Sunlight      W/m^2       Power                      kW")        self.pack(side=TOP, anchor=S, expand=True, fill=BOTH)        master.title("PV Plotter")        self._pvdata = pvdata        self._cood = CoordinateTranslator(self.winfo_width(), self.winfo_height(), len(self._pvdata.get_temperature()))        self._draw_power = []        self._draw_temperature = None        self._draw_sunlight = None        self.bind("<Button-1>", self._click_event)        self.bind("<ButtonRelease-1>", self._release_event)                self.bind("<B1-Motion>", self._move_event)        self.bind('<Configure>', self.resize)        self._power_shown = 1        self._sunlight_shown = 0        self._temp_shown = 0                #self.update()    def set_label(self):        self._v.set("Date for " + str(self._pvdata.get_date()) + " at  " + str(self._time)+ "  Temperature  " + str(self._temp) + "  C       Sunlight   " + str(self._sunlight)+"   W/m^2       Power        " + str(self._power)+"       kW")    def resize(self, event):        """The method responsible to recognise the resize of the canvas and update the plot        """        self._cood.resize(self.winfo_width(), self.winfo_height())        #self.redraw()    def _click_event(self, event):        """Recognises the click and hold of the mouse within the canvas and creates a 1pxline        showing the cross section        """        self._line = self.create_line(event.x+1, 0, event.x+1, canvasheight, fill="black")        if event.x <= 840 and event.x  >= 1:            try:                self._time = self._pvdata.get_time(event.x-1)                if self._temp_shown:                    self._temp = self._pvdata.get_temperature()[event.x-1]                if self._power_shown:                    self._power = self._pvdata.get_power(self._pvdata.get_array())[event.x-1]                if self._sunlight_shown:                    self._sunlight = self._pvdata.get_sunlight()[event.x-1]                self.set_label()            except Exception as e:                                tkMessageBox.showerror(repr(e).split('(')[0], str(e))    def _release_event(self,event):        """Recognises the release of the mouse and deletes the line        """        self.delete(self._line)    def graphs_shown(self, power_shown, sunlight_shown, temp_shown):        self._power_shown = power_shown        self._sunlight_shown = sunlight_shown        self._temp_shown = temp_shown    def _move_event(self, event):        """Recognises the moving of the mouse along the canvas and updates the data accordingly        """        self.delete(self._line)        self._line = self.create_line(event.x+1, 0, event.x+1, canvasheight, fill="black")        if event.x <= 840 and event.x  >= 1:            try:                self._time = self._pvdata.get_time(event.x-1)                if self._temp_shown:                    self._temp = self._pvdata.get_temperature()[event.x-1]                if self._power_shown:                    self._power = self._pvdata.get_power(self._pvdata.get_array())[event.x-1]                if self._sunlight_shown:                    self._sunlight = self._pvdata.get_sunlight()[event.x-1]                self.set_label()            except Exception as e:                tkMessageBox.showerror(repr(e).split('(')[0], str(e))    def draw_power(self, array):        """Responsible for drawing the power data within the canvas        """        x_coord = 1        all_rectangles = []        for minute in self._pvdata.get_power(array, load_data(self._pvdata.get_date())):                        list_of_power = []            list_of_power.append(x_coord)            list_of_power.append(canvasheight)            list_of_power.append(x_coord+1)            list_of_power.append(canvasheight-minute/1000)            x_coord += 1            self._draw_power.append(self.create_rectangle(list_of_power, outline='orchid', fill='orchid'))    def draw_temperature(self, colour):        """Method of drawing the temperature data        """        x_coord = 1        list_of_temperatures = []        for minute in self._pvdata.get_temperature(load_data(self._pvdata.get_date())):            list_of_temperatures.append(x_coord)            list_of_temperatures.append(canvasheight-minute*10)            x_coord += 1        self._draw_temperature = self.create_line(list_of_temperatures, fill="red")    def draw_sunlight(self, colour):        """Method of drawing the sunlight data        """        list_of_sunlight = []        x_coord = 1        for minute in self._pvdata.get_sunlight():            list_of_sunlight.append(x_coord)            list_of_sunlight.append(canvasheight-minute/3)            x_coord += 1        self._draw_sunlight = self.create_line(list_of_sunlight, fill='orange')    def clear(self, item=ALL):        """The method that clears the canvas completely        """        self.delete(item)class OptionsFrame(Frame):    """The widget class that chooses all options    """    def __init__(self, master, plotter, pvdata):        """Creates all frames and buttons        """        self._showpower =  IntVar()        self._showtemp = IntVar()        self._showsunlight =  IntVar()        self._currentdate = yesterday()        self._pvdata = pvdata        self._plotter = plotter        frame1 = Frame(master)        Checkbutton(frame1, text='Temperature', variable = self._showtemp, command = self._redraw).pack(side= LEFT)        check_power = Checkbutton(frame1, text='Power', variable =  self._showpower, command = self._redraw)        Checkbutton(frame1, text='Sunlight', variable = self._showsunlight, command = self._redraw).pack(side=LEFT)        check_power.pack(side=LEFT)        check_power.select()        frame1.pack(side=TOP)        frame2 = Frame(master)        Label(master, text="Choose Date: ").pack(side=LEFT)        self._entry = Entry(master)                self._entry.insert(0,pvdata.get_date())        self._entry.pack(side=LEFT)        Button(master, text="Apply", command=self._apply_change).pack(side=LEFT, padx=10, pady=10)        self.var = StringVar()        self.var.set(ARRAYS[-1])        arraylist = OptionMenu(frame2, self.var, *ARRAYS, command=self._redraw)        arraylist.pack(side=RIGHT, anchor=W, pady=10, padx=10)        frame2.pack(side=RIGHT)        frame3 = Frame(master)        self._date = self._entry.get()        frame3.pack(side=TOP)        plotter.draw_power(self.var.get())    def _apply_change(self):        """Creates and defines the function of the apply button        """        self._date = self._entry.get()        self._old_date = self._pvdata.get_date()        if self._date != self._old_date:            self._pvdata.change_date(self._date)        self._redraw()    def opmenu(self, array):        self._redraw()    def _redraw(self):        """The method that redraws the graph when changes are made to the check buttons        """        self._plotter.clear()        if self._showpower.get():            try:                self._plotter.draw_power(self.var.get())            except Exception as e:                tkMessageBox.showerror(repr(e).split('(')[0], str(e))                return None        if self._showsunlight.get():            try:                self._plotter.draw_sunlight("orange")            except Exception as e:                tkMessageBox.showerror(repr(e).split('(')[0], str(e))                return None        if self._showtemp.get():            try:                self._plotter.draw_temperature("red")            except Exception as e:                tkMessageBox.showerror(repr(e).split('(')[0], str(e))                return None        self._plotter.graphs_shown(self._showpower.get(), self._showsunlight.get(),  self._showtemp.get())class PVPlotApp(object):    """Responsible for creating and managing all instances    """    def __init(self):        passpvd = PVData()root = Tk()app = Plotter(root,pvd)frame = OptionsFrame(root, app, pvd)root.mainloop()###################################################################### WARNING: Leave the following code at the end of your code## DO NOT CHANGE ANYTHING BELOW#####################################################################def main():    root = Tk()    app = PVPlotApp(root)    root.mainloop()if __name__ == '__main__':    main()